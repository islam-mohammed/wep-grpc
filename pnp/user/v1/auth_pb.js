// source: pnp/user/v1/auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.pnp.user.v1.AuthRequest', null, global);
goog.exportSymbol('proto.pnp.user.v1.AuthRequest.CredentialsCase', null, global);
goog.exportSymbol('proto.pnp.user.v1.AuthRequest.EmailAuth', null, global);
goog.exportSymbol('proto.pnp.user.v1.AuthRequest.ProviderAuth', null, global);
goog.exportSymbol('proto.pnp.user.v1.AuthRequest.ProviderAuth.Type', null, global);
goog.exportSymbol('proto.pnp.user.v1.AuthRequest.Type', null, global);
goog.exportSymbol('proto.pnp.user.v1.AuthResponse', null, global);
goog.exportSymbol('proto.pnp.user.v1.ConfirmPasswordRequest', null, global);
goog.exportSymbol('proto.pnp.user.v1.ResetPasswordRequest', null, global);
goog.exportSymbol('proto.pnp.user.v1.ValidateResetTokenRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.AuthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pnp.user.v1.AuthRequest.oneofGroups_);
};
goog.inherits(proto.pnp.user.v1.AuthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.AuthRequest.displayName = 'proto.pnp.user.v1.AuthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.AuthRequest.EmailAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.user.v1.AuthRequest.EmailAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.AuthRequest.EmailAuth.displayName = 'proto.pnp.user.v1.AuthRequest.EmailAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.user.v1.AuthRequest.ProviderAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.AuthRequest.ProviderAuth.displayName = 'proto.pnp.user.v1.AuthRequest.ProviderAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.ValidateResetTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.user.v1.ValidateResetTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.ValidateResetTokenRequest.displayName = 'proto.pnp.user.v1.ValidateResetTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.ResetPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.user.v1.ResetPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.ResetPasswordRequest.displayName = 'proto.pnp.user.v1.ResetPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.ConfirmPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.user.v1.ConfirmPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.ConfirmPasswordRequest.displayName = 'proto.pnp.user.v1.ConfirmPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.user.v1.AuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.user.v1.AuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.user.v1.AuthResponse.displayName = 'proto.pnp.user.v1.AuthResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pnp.user.v1.AuthRequest.oneofGroups_ = [[16,17,18]];

/**
 * @enum {number}
 */
proto.pnp.user.v1.AuthRequest.CredentialsCase = {
  CREDENTIALS_NOT_SET: 0,
  EMAIL_AUTH: 16,
  PROVIDER_AUTH: 17,
  REFRESH_TOKEN: 18
};

/**
 * @return {proto.pnp.user.v1.AuthRequest.CredentialsCase}
 */
proto.pnp.user.v1.AuthRequest.prototype.getCredentialsCase = function() {
  return /** @type {proto.pnp.user.v1.AuthRequest.CredentialsCase} */(jspb.Message.computeOneofCase(this, proto.pnp.user.v1.AuthRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.AuthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.AuthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.AuthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    emailAuth: (f = msg.getEmailAuth()) && proto.pnp.user.v1.AuthRequest.EmailAuth.toObject(includeInstance, f),
    providerAuth: (f = msg.getProviderAuth()) && proto.pnp.user.v1.AuthRequest.ProviderAuth.toObject(includeInstance, f),
    refreshToken: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.AuthRequest}
 */
proto.pnp.user.v1.AuthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.AuthRequest;
  return proto.pnp.user.v1.AuthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.AuthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.AuthRequest}
 */
proto.pnp.user.v1.AuthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.user.v1.AuthRequest.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 16:
      var value = new proto.pnp.user.v1.AuthRequest.EmailAuth;
      reader.readMessage(value,proto.pnp.user.v1.AuthRequest.EmailAuth.deserializeBinaryFromReader);
      msg.setEmailAuth(value);
      break;
    case 17:
      var value = new proto.pnp.user.v1.AuthRequest.ProviderAuth;
      reader.readMessage(value,proto.pnp.user.v1.AuthRequest.ProviderAuth.deserializeBinaryFromReader);
      msg.setProviderAuth(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.AuthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.AuthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.AuthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEmailAuth();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.pnp.user.v1.AuthRequest.EmailAuth.serializeBinaryToWriter
    );
  }
  f = message.getProviderAuth();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.pnp.user.v1.AuthRequest.ProviderAuth.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.user.v1.AuthRequest.Type = {
  REFRESH_TOKEN: 0,
  EMAIL: 1,
  PROVIDER: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.AuthRequest.EmailAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.AuthRequest.EmailAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.AuthRequest.EmailAuth}
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.AuthRequest.EmailAuth;
  return proto.pnp.user.v1.AuthRequest.EmailAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.AuthRequest.EmailAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.AuthRequest.EmailAuth}
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.AuthRequest.EmailAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.AuthRequest.EmailAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthRequest.EmailAuth} returns this
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthRequest.EmailAuth} returns this
 */
proto.pnp.user.v1.AuthRequest.EmailAuth.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.AuthRequest.ProviderAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.AuthRequest.ProviderAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    identityToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.AuthRequest.ProviderAuth}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.AuthRequest.ProviderAuth;
  return proto.pnp.user.v1.AuthRequest.ProviderAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.AuthRequest.ProviderAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.AuthRequest.ProviderAuth}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.user.v1.AuthRequest.ProviderAuth.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.AuthRequest.ProviderAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.AuthRequest.ProviderAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIdentityToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.Type = {
  FIREBASE: 0
};

/**
 * optional Type type = 1;
 * @return {!proto.pnp.user.v1.AuthRequest.ProviderAuth.Type}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.getType = function() {
  return /** @type {!proto.pnp.user.v1.AuthRequest.ProviderAuth.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.user.v1.AuthRequest.ProviderAuth.Type} value
 * @return {!proto.pnp.user.v1.AuthRequest.ProviderAuth} returns this
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string identity_token = 2;
 * @return {string}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.getIdentityToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthRequest.ProviderAuth} returns this
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.setIdentityToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string access_token = 3;
 * @return {string}
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthRequest.ProviderAuth} returns this
 */
proto.pnp.user.v1.AuthRequest.ProviderAuth.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.pnp.user.v1.AuthRequest.Type}
 */
proto.pnp.user.v1.AuthRequest.prototype.getType = function() {
  return /** @type {!proto.pnp.user.v1.AuthRequest.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.user.v1.AuthRequest.Type} value
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
 */
proto.pnp.user.v1.AuthRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EmailAuth email_auth = 16;
 * @return {?proto.pnp.user.v1.AuthRequest.EmailAuth}
 */
proto.pnp.user.v1.AuthRequest.prototype.getEmailAuth = function() {
  return /** @type{?proto.pnp.user.v1.AuthRequest.EmailAuth} */ (
    jspb.Message.getWrapperField(this, proto.pnp.user.v1.AuthRequest.EmailAuth, 16));
};


/**
 * @param {?proto.pnp.user.v1.AuthRequest.EmailAuth|undefined} value
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
*/
proto.pnp.user.v1.AuthRequest.prototype.setEmailAuth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.pnp.user.v1.AuthRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
 */
proto.pnp.user.v1.AuthRequest.prototype.clearEmailAuth = function() {
  return this.setEmailAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.user.v1.AuthRequest.prototype.hasEmailAuth = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ProviderAuth provider_auth = 17;
 * @return {?proto.pnp.user.v1.AuthRequest.ProviderAuth}
 */
proto.pnp.user.v1.AuthRequest.prototype.getProviderAuth = function() {
  return /** @type{?proto.pnp.user.v1.AuthRequest.ProviderAuth} */ (
    jspb.Message.getWrapperField(this, proto.pnp.user.v1.AuthRequest.ProviderAuth, 17));
};


/**
 * @param {?proto.pnp.user.v1.AuthRequest.ProviderAuth|undefined} value
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
*/
proto.pnp.user.v1.AuthRequest.prototype.setProviderAuth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.pnp.user.v1.AuthRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
 */
proto.pnp.user.v1.AuthRequest.prototype.clearProviderAuth = function() {
  return this.setProviderAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.user.v1.AuthRequest.prototype.hasProviderAuth = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string refresh_token = 18;
 * @return {string}
 */
proto.pnp.user.v1.AuthRequest.prototype.getRefreshToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
 */
proto.pnp.user.v1.AuthRequest.prototype.setRefreshToken = function(value) {
  return jspb.Message.setOneofField(this, 18, proto.pnp.user.v1.AuthRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pnp.user.v1.AuthRequest} returns this
 */
proto.pnp.user.v1.AuthRequest.prototype.clearRefreshToken = function() {
  return jspb.Message.setOneofField(this, 18, proto.pnp.user.v1.AuthRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.user.v1.AuthRequest.prototype.hasRefreshToken = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.ValidateResetTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.ValidateResetTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.ValidateResetTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.ValidateResetTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resetToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.ValidateResetTokenRequest}
 */
proto.pnp.user.v1.ValidateResetTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.ValidateResetTokenRequest;
  return proto.pnp.user.v1.ValidateResetTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.ValidateResetTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.ValidateResetTokenRequest}
 */
proto.pnp.user.v1.ValidateResetTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResetToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.ValidateResetTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.ValidateResetTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.ValidateResetTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.ValidateResetTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResetToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reset_token = 1;
 * @return {string}
 */
proto.pnp.user.v1.ValidateResetTokenRequest.prototype.getResetToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.ValidateResetTokenRequest} returns this
 */
proto.pnp.user.v1.ValidateResetTokenRequest.prototype.setResetToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.ResetPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.ResetPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.ResetPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.ResetPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.ResetPasswordRequest}
 */
proto.pnp.user.v1.ResetPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.ResetPasswordRequest;
  return proto.pnp.user.v1.ResetPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.ResetPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.ResetPasswordRequest}
 */
proto.pnp.user.v1.ResetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.ResetPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.ResetPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.ResetPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.ResetPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.pnp.user.v1.ResetPasswordRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.ResetPasswordRequest} returns this
 */
proto.pnp.user.v1.ResetPasswordRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.ConfirmPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.ConfirmPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.ConfirmPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.ConfirmPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resetToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.ConfirmPasswordRequest}
 */
proto.pnp.user.v1.ConfirmPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.ConfirmPasswordRequest;
  return proto.pnp.user.v1.ConfirmPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.ConfirmPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.ConfirmPasswordRequest}
 */
proto.pnp.user.v1.ConfirmPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResetToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.ConfirmPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.ConfirmPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.ConfirmPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.ConfirmPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResetToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string reset_token = 1;
 * @return {string}
 */
proto.pnp.user.v1.ConfirmPasswordRequest.prototype.getResetToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.ConfirmPasswordRequest} returns this
 */
proto.pnp.user.v1.ConfirmPasswordRequest.prototype.setResetToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_password = 2;
 * @return {string}
 */
proto.pnp.user.v1.ConfirmPasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.ConfirmPasswordRequest} returns this
 */
proto.pnp.user.v1.ConfirmPasswordRequest.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.user.v1.AuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.user.v1.AuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.user.v1.AuthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bearerToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    refreshToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.user.v1.AuthResponse}
 */
proto.pnp.user.v1.AuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.user.v1.AuthResponse;
  return proto.pnp.user.v1.AuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.user.v1.AuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.user.v1.AuthResponse}
 */
proto.pnp.user.v1.AuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBearerToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.user.v1.AuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.user.v1.AuthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.user.v1.AuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.user.v1.AuthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBearerToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bearer_token = 1;
 * @return {string}
 */
proto.pnp.user.v1.AuthResponse.prototype.getBearerToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthResponse} returns this
 */
proto.pnp.user.v1.AuthResponse.prototype.setBearerToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string refresh_token = 2;
 * @return {string}
 */
proto.pnp.user.v1.AuthResponse.prototype.getRefreshToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.user.v1.AuthResponse} returns this
 */
proto.pnp.user.v1.AuthResponse.prototype.setRefreshToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.pnp.user.v1);
