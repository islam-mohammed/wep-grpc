// source: pnp/form/v1/form.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pnp.form.v1.Block', null, global);
goog.exportSymbol('proto.pnp.form.v1.Block.Validation', null, global);
goog.exportSymbol('proto.pnp.form.v1.Block.Validation.Type', null, global);
goog.exportSymbol('proto.pnp.form.v1.Form', null, global);
goog.exportSymbol('proto.pnp.form.v1.GetFormRequest', null, global);
goog.exportSymbol('proto.pnp.form.v1.Page', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Choice', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Choice.Option', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Choice.Section', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.FirstNameAudio', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.QuestionCase', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Recipient', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Recipient.Type', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Text', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Text.Type', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Type', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Validation', null, global);
goog.exportSymbol('proto.pnp.form.v1.Question.Validation.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.GetFormRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.form.v1.GetFormRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.GetFormRequest.displayName = 'proto.pnp.form.v1.GetFormRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Form = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Form.repeatedFields_, null);
};
goog.inherits(proto.pnp.form.v1.Form, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Form.displayName = 'proto.pnp.form.v1.Form';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Page.repeatedFields_, null);
};
goog.inherits(proto.pnp.form.v1.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Page.displayName = 'proto.pnp.form.v1.Page';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Block.repeatedFields_, null);
};
goog.inherits(proto.pnp.form.v1.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Block.displayName = 'proto.pnp.form.v1.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Block.Validation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Block.Validation.repeatedFields_, null);
};
goog.inherits(proto.pnp.form.v1.Block.Validation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Block.Validation.displayName = 'proto.pnp.form.v1.Block.Validation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Question.repeatedFields_, proto.pnp.form.v1.Question.oneofGroups_);
};
goog.inherits(proto.pnp.form.v1.Question, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.displayName = 'proto.pnp.form.v1.Question';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.Choice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Question.Choice.repeatedFields_, null);
};
goog.inherits(proto.pnp.form.v1.Question.Choice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.Choice.displayName = 'proto.pnp.form.v1.Question.Choice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.Choice.Section = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.form.v1.Question.Choice.Section.repeatedFields_, null);
};
goog.inherits(proto.pnp.form.v1.Question.Choice.Section, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.Choice.Section.displayName = 'proto.pnp.form.v1.Question.Choice.Section';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.Choice.Option = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.form.v1.Question.Choice.Option, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.Choice.Option.displayName = 'proto.pnp.form.v1.Question.Choice.Option';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.FirstNameAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.form.v1.Question.FirstNameAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.FirstNameAudio.displayName = 'proto.pnp.form.v1.Question.FirstNameAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.form.v1.Question.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.Text.displayName = 'proto.pnp.form.v1.Question.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.Recipient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.form.v1.Question.Recipient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.Recipient.displayName = 'proto.pnp.form.v1.Question.Recipient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.form.v1.Question.Validation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.form.v1.Question.Validation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.form.v1.Question.Validation.displayName = 'proto.pnp.form.v1.Question.Validation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.GetFormRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.GetFormRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.GetFormRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.GetFormRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.GetFormRequest}
 */
proto.pnp.form.v1.GetFormRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.GetFormRequest;
  return proto.pnp.form.v1.GetFormRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.GetFormRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.GetFormRequest}
 */
proto.pnp.form.v1.GetFormRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.GetFormRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.GetFormRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.GetFormRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.GetFormRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.pnp.form.v1.GetFormRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.form.v1.GetFormRequest} returns this
 */
proto.pnp.form.v1.GetFormRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Form.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Form.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Form.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Form} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Form.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    proto.pnp.form.v1.Page.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Form}
 */
proto.pnp.form.v1.Form.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Form;
  return proto.pnp.form.v1.Form.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Form} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Form}
 */
proto.pnp.form.v1.Form.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.pnp.form.v1.Page;
      reader.readMessage(value,proto.pnp.form.v1.Page.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Form.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Form.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Form} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Form.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pnp.form.v1.Page.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.pnp.form.v1.Form.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.form.v1.Form} returns this
 */
proto.pnp.form.v1.Form.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.pnp.form.v1.Form.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Form} returns this
 */
proto.pnp.form.v1.Form.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Page pages = 3;
 * @return {!Array<!proto.pnp.form.v1.Page>}
 */
proto.pnp.form.v1.Form.prototype.getPagesList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Page>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Page, 3));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Page>} value
 * @return {!proto.pnp.form.v1.Form} returns this
*/
proto.pnp.form.v1.Form.prototype.setPagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pnp.form.v1.Page=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Page}
 */
proto.pnp.form.v1.Form.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pnp.form.v1.Page, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Form} returns this
 */
proto.pnp.form.v1.Form.prototype.clearPagesList = function() {
  return this.setPagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Page.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nextButton: jspb.Message.getFieldWithDefault(msg, 3, ""),
    previousButton: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.pnp.form.v1.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Page}
 */
proto.pnp.form.v1.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Page;
  return proto.pnp.form.v1.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Page}
 */
proto.pnp.form.v1.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextButton(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousButton(value);
      break;
    case 5:
      var value = new proto.pnp.form.v1.Block;
      reader.readMessage(value,proto.pnp.form.v1.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNextButton();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreviousButton();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pnp.form.v1.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.pnp.form.v1.Page.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Page} returns this
 */
proto.pnp.form.v1.Page.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string icon = 2;
 * @return {string}
 */
proto.pnp.form.v1.Page.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Page} returns this
 */
proto.pnp.form.v1.Page.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string next_button = 3;
 * @return {string}
 */
proto.pnp.form.v1.Page.prototype.getNextButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Page} returns this
 */
proto.pnp.form.v1.Page.prototype.setNextButton = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string previous_button = 4;
 * @return {string}
 */
proto.pnp.form.v1.Page.prototype.getPreviousButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Page} returns this
 */
proto.pnp.form.v1.Page.prototype.setPreviousButton = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Block blocks = 5;
 * @return {!Array<!proto.pnp.form.v1.Block>}
 */
proto.pnp.form.v1.Page.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Block, 5));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Block>} value
 * @return {!proto.pnp.form.v1.Page} returns this
*/
proto.pnp.form.v1.Page.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pnp.form.v1.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Block}
 */
proto.pnp.form.v1.Page.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pnp.form.v1.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Page} returns this
 */
proto.pnp.form.v1.Page.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Block.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.pnp.form.v1.Question.toObject, includeInstance),
    validationsList: jspb.Message.toObjectList(msg.getValidationsList(),
    proto.pnp.form.v1.Block.Validation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Block}
 */
proto.pnp.form.v1.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Block;
  return proto.pnp.form.v1.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Block}
 */
proto.pnp.form.v1.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pnp.form.v1.Question;
      reader.readMessage(value,proto.pnp.form.v1.Question.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    case 2:
      var value = new proto.pnp.form.v1.Block.Validation;
      reader.readMessage(value,proto.pnp.form.v1.Block.Validation.deserializeBinaryFromReader);
      msg.addValidations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pnp.form.v1.Question.serializeBinaryToWriter
    );
  }
  f = message.getValidationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pnp.form.v1.Block.Validation.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Block.Validation.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Block.Validation.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Block.Validation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Block.Validation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Block.Validation.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    antecedentInput: jspb.Message.getFieldWithDefault(msg, 3, ""),
    consequentInput: jspb.Message.getFieldWithDefault(msg, 4, ""),
    antecedentValuesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Block.Validation}
 */
proto.pnp.form.v1.Block.Validation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Block.Validation;
  return proto.pnp.form.v1.Block.Validation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Block.Validation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Block.Validation}
 */
proto.pnp.form.v1.Block.Validation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.form.v1.Block.Validation.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAntecedentInput(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsequentInput(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAntecedentValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Block.Validation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Block.Validation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Block.Validation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Block.Validation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAntecedentInput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConsequentInput();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAntecedentValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.form.v1.Block.Validation.Type = {
  REQUIRED_IF_NOT_EMPTY: 0,
  EMPTY_IF_EMPTY: 1,
  EMPTY_IF_NOT_EMPTY: 2,
  REQUIRED_IF_EMPTY: 3,
  REQUIRED_IF_VALUE: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.pnp.form.v1.Block.Validation.Type}
 */
proto.pnp.form.v1.Block.Validation.prototype.getType = function() {
  return /** @type {!proto.pnp.form.v1.Block.Validation.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.form.v1.Block.Validation.Type} value
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.pnp.form.v1.Block.Validation.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string antecedent_input = 3;
 * @return {string}
 */
proto.pnp.form.v1.Block.Validation.prototype.getAntecedentInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.setAntecedentInput = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string consequent_input = 4;
 * @return {string}
 */
proto.pnp.form.v1.Block.Validation.prototype.getConsequentInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.setConsequentInput = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string antecedent_values = 5;
 * @return {!Array<string>}
 */
proto.pnp.form.v1.Block.Validation.prototype.getAntecedentValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.setAntecedentValuesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.addAntecedentValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Block.Validation} returns this
 */
proto.pnp.form.v1.Block.Validation.prototype.clearAntecedentValuesList = function() {
  return this.setAntecedentValuesList([]);
};


/**
 * repeated Question questions = 1;
 * @return {!Array<!proto.pnp.form.v1.Question>}
 */
proto.pnp.form.v1.Block.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Question>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Question, 1));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Question>} value
 * @return {!proto.pnp.form.v1.Block} returns this
*/
proto.pnp.form.v1.Block.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pnp.form.v1.Question=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Question}
 */
proto.pnp.form.v1.Block.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pnp.form.v1.Question, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Block} returns this
 */
proto.pnp.form.v1.Block.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};


/**
 * repeated Validation validations = 2;
 * @return {!Array<!proto.pnp.form.v1.Block.Validation>}
 */
proto.pnp.form.v1.Block.prototype.getValidationsList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Block.Validation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Block.Validation, 2));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Block.Validation>} value
 * @return {!proto.pnp.form.v1.Block} returns this
*/
proto.pnp.form.v1.Block.prototype.setValidationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pnp.form.v1.Block.Validation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Block.Validation}
 */
proto.pnp.form.v1.Block.prototype.addValidations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pnp.form.v1.Block.Validation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Block} returns this
 */
proto.pnp.form.v1.Block.prototype.clearValidationsList = function() {
  return this.setValidationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Question.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pnp.form.v1.Question.oneofGroups_ = [[16,17,18,19]];

/**
 * @enum {number}
 */
proto.pnp.form.v1.Question.QuestionCase = {
  QUESTION_NOT_SET: 0,
  CHOICE: 16,
  FIRST_NAME_AUDIO: 17,
  TEXT: 18,
  RECIPIENT: 19
};

/**
 * @return {proto.pnp.form.v1.Question.QuestionCase}
 */
proto.pnp.form.v1.Question.prototype.getQuestionCase = function() {
  return /** @type {proto.pnp.form.v1.Question.QuestionCase} */(jspb.Message.computeOneofCase(this, proto.pnp.form.v1.Question.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inputName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    label: jspb.Message.getFieldWithDefault(msg, 3, ""),
    placeHolder: jspb.Message.getFieldWithDefault(msg, 4, ""),
    validationsList: jspb.Message.toObjectList(msg.getValidationsList(),
    proto.pnp.form.v1.Question.Validation.toObject, includeInstance),
    choice: (f = msg.getChoice()) && proto.pnp.form.v1.Question.Choice.toObject(includeInstance, f),
    firstNameAudio: (f = msg.getFirstNameAudio()) && proto.pnp.form.v1.Question.FirstNameAudio.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.pnp.form.v1.Question.Text.toObject(includeInstance, f),
    recipient: (f = msg.getRecipient()) && proto.pnp.form.v1.Question.Recipient.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question}
 */
proto.pnp.form.v1.Question.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question;
  return proto.pnp.form.v1.Question.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question}
 */
proto.pnp.form.v1.Question.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.form.v1.Question.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceHolder(value);
      break;
    case 5:
      var value = new proto.pnp.form.v1.Question.Validation;
      reader.readMessage(value,proto.pnp.form.v1.Question.Validation.deserializeBinaryFromReader);
      msg.addValidations(value);
      break;
    case 16:
      var value = new proto.pnp.form.v1.Question.Choice;
      reader.readMessage(value,proto.pnp.form.v1.Question.Choice.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    case 17:
      var value = new proto.pnp.form.v1.Question.FirstNameAudio;
      reader.readMessage(value,proto.pnp.form.v1.Question.FirstNameAudio.deserializeBinaryFromReader);
      msg.setFirstNameAudio(value);
      break;
    case 18:
      var value = new proto.pnp.form.v1.Question.Text;
      reader.readMessage(value,proto.pnp.form.v1.Question.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 19:
      var value = new proto.pnp.form.v1.Question.Recipient;
      reader.readMessage(value,proto.pnp.form.v1.Question.Recipient.deserializeBinaryFromReader);
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInputName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlaceHolder();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValidationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pnp.form.v1.Question.Validation.serializeBinaryToWriter
    );
  }
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.pnp.form.v1.Question.Choice.serializeBinaryToWriter
    );
  }
  f = message.getFirstNameAudio();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.pnp.form.v1.Question.FirstNameAudio.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.pnp.form.v1.Question.Text.serializeBinaryToWriter
    );
  }
  f = message.getRecipient();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.pnp.form.v1.Question.Recipient.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.form.v1.Question.Type = {
  CHOICE: 0,
  CHOICE_DEPENDENT: 1,
  DATE: 2,
  FIRST_NAME_AUDIO: 3,
  PICTURE: 4,
  TEXT: 5,
  RECIPIENT: 6,
  GROUP_NAME: 7
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Question.Choice.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.Choice.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.Choice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.Choice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Choice.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentInputName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.pnp.form.v1.Question.Choice.Section.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.Choice}
 */
proto.pnp.form.v1.Question.Choice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.Choice;
  return proto.pnp.form.v1.Question.Choice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.Choice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.Choice}
 */
proto.pnp.form.v1.Question.Choice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.form.v1.Question.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentInputName(value);
      break;
    case 3:
      var value = new proto.pnp.form.v1.Question.Choice.Section;
      reader.readMessage(value,proto.pnp.form.v1.Question.Choice.Section.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.Choice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.Choice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.Choice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Choice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParentInputName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pnp.form.v1.Question.Choice.Section.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.form.v1.Question.Choice.Section.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.Choice.Section.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.Choice.Section} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Choice.Section.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parentInputValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.pnp.form.v1.Question.Choice.Option.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.Choice.Section}
 */
proto.pnp.form.v1.Question.Choice.Section.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.Choice.Section;
  return proto.pnp.form.v1.Question.Choice.Section.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.Choice.Section} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.Choice.Section}
 */
proto.pnp.form.v1.Question.Choice.Section.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentInputValue(value);
      break;
    case 3:
      var value = new proto.pnp.form.v1.Question.Choice.Option;
      reader.readMessage(value,proto.pnp.form.v1.Question.Choice.Option.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.Choice.Section.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.Choice.Section} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Choice.Section.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParentInputValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pnp.form.v1.Question.Choice.Option.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Choice.Section} returns this
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string parent_input_value = 2;
 * @return {string}
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.getParentInputValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Choice.Section} returns this
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.setParentInputValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Option options = 3;
 * @return {!Array<!proto.pnp.form.v1.Question.Choice.Option>}
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Question.Choice.Option>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Question.Choice.Option, 3));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Question.Choice.Option>} value
 * @return {!proto.pnp.form.v1.Question.Choice.Section} returns this
*/
proto.pnp.form.v1.Question.Choice.Section.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pnp.form.v1.Question.Choice.Option=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Question.Choice.Option}
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pnp.form.v1.Question.Choice.Option, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Question.Choice.Section} returns this
 */
proto.pnp.form.v1.Question.Choice.Section.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.Choice.Option.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.Choice.Option} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Choice.Option.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.Choice.Option}
 */
proto.pnp.form.v1.Question.Choice.Option.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.Choice.Option;
  return proto.pnp.form.v1.Question.Choice.Option.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.Choice.Option} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.Choice.Option}
 */
proto.pnp.form.v1.Question.Choice.Option.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.Choice.Option.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.Choice.Option} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Choice.Option.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Choice.Option} returns this
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Choice.Option} returns this
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Choice.Option} returns this
 */
proto.pnp.form.v1.Question.Choice.Option.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.pnp.form.v1.Question.Type}
 */
proto.pnp.form.v1.Question.Choice.prototype.getType = function() {
  return /** @type {!proto.pnp.form.v1.Question.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.form.v1.Question.Type} value
 * @return {!proto.pnp.form.v1.Question.Choice} returns this
 */
proto.pnp.form.v1.Question.Choice.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string parent_input_name = 2;
 * @return {string}
 */
proto.pnp.form.v1.Question.Choice.prototype.getParentInputName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Choice} returns this
 */
proto.pnp.form.v1.Question.Choice.prototype.setParentInputName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Section sections = 3;
 * @return {!Array<!proto.pnp.form.v1.Question.Choice.Section>}
 */
proto.pnp.form.v1.Question.Choice.prototype.getSectionsList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Question.Choice.Section>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Question.Choice.Section, 3));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Question.Choice.Section>} value
 * @return {!proto.pnp.form.v1.Question.Choice} returns this
*/
proto.pnp.form.v1.Question.Choice.prototype.setSectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pnp.form.v1.Question.Choice.Section=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Question.Choice.Section}
 */
proto.pnp.form.v1.Question.Choice.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pnp.form.v1.Question.Choice.Section, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Question.Choice} returns this
 */
proto.pnp.form.v1.Question.Choice.prototype.clearSectionsList = function() {
  return this.setSectionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.FirstNameAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.FirstNameAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.FirstNameAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.FirstNameAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentInputName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.FirstNameAudio}
 */
proto.pnp.form.v1.Question.FirstNameAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.FirstNameAudio;
  return proto.pnp.form.v1.Question.FirstNameAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.FirstNameAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.FirstNameAudio}
 */
proto.pnp.form.v1.Question.FirstNameAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentInputName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.FirstNameAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.FirstNameAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.FirstNameAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.FirstNameAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentInputName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string parent_input_name = 1;
 * @return {string}
 */
proto.pnp.form.v1.Question.FirstNameAudio.prototype.getParentInputName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.FirstNameAudio} returns this
 */
proto.pnp.form.v1.Question.FirstNameAudio.prototype.setParentInputName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.Text}
 */
proto.pnp.form.v1.Question.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.Text;
  return proto.pnp.form.v1.Question.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.Text}
 */
proto.pnp.form.v1.Question.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.form.v1.Question.Text.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.form.v1.Question.Text.Type = {
  DEFAULT: 0,
  PHONE: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.pnp.form.v1.Question.Text.Type}
 */
proto.pnp.form.v1.Question.Text.prototype.getType = function() {
  return /** @type {!proto.pnp.form.v1.Question.Text.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.form.v1.Question.Text.Type} value
 * @return {!proto.pnp.form.v1.Question.Text} returns this
 */
proto.pnp.form.v1.Question.Text.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.Recipient.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.Recipient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.Recipient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Recipient.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.Recipient}
 */
proto.pnp.form.v1.Question.Recipient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.Recipient;
  return proto.pnp.form.v1.Question.Recipient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.Recipient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.Recipient}
 */
proto.pnp.form.v1.Question.Recipient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.form.v1.Question.Recipient.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.Recipient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.Recipient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.Recipient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Recipient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.form.v1.Question.Recipient.Type = {
  SINGLE: 0,
  GROUP: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.pnp.form.v1.Question.Recipient.Type}
 */
proto.pnp.form.v1.Question.Recipient.prototype.getType = function() {
  return /** @type {!proto.pnp.form.v1.Question.Recipient.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.form.v1.Question.Recipient.Type} value
 * @return {!proto.pnp.form.v1.Question.Recipient} returns this
 */
proto.pnp.form.v1.Question.Recipient.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.form.v1.Question.Validation.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.form.v1.Question.Validation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.form.v1.Question.Validation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Validation.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.form.v1.Question.Validation}
 */
proto.pnp.form.v1.Question.Validation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.form.v1.Question.Validation;
  return proto.pnp.form.v1.Question.Validation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.form.v1.Question.Validation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.form.v1.Question.Validation}
 */
proto.pnp.form.v1.Question.Validation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.form.v1.Question.Validation.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.form.v1.Question.Validation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.form.v1.Question.Validation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.form.v1.Question.Validation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.form.v1.Question.Validation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.form.v1.Question.Validation.Type = {
  NOT_EMPTY: 0,
  PAST_DATE: 1,
  MAX_LENGTH: 2,
  MIN_LENGTH: 3,
  IS_EMAIL: 4,
  IS_VALID_GEO_DATA: 5,
  IS_VALID_S3_URL: 6
};

/**
 * optional Type type = 1;
 * @return {!proto.pnp.form.v1.Question.Validation.Type}
 */
proto.pnp.form.v1.Question.Validation.prototype.getType = function() {
  return /** @type {!proto.pnp.form.v1.Question.Validation.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.form.v1.Question.Validation.Type} value
 * @return {!proto.pnp.form.v1.Question.Validation} returns this
 */
proto.pnp.form.v1.Question.Validation.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 value = 2;
 * @return {number}
 */
proto.pnp.form.v1.Question.Validation.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.form.v1.Question.Validation} returns this
 */
proto.pnp.form.v1.Question.Validation.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.pnp.form.v1.Question.Validation.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question.Validation} returns this
 */
proto.pnp.form.v1.Question.Validation.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.pnp.form.v1.Question.Type}
 */
proto.pnp.form.v1.Question.prototype.getType = function() {
  return /** @type {!proto.pnp.form.v1.Question.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.form.v1.Question.Type} value
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string input_name = 2;
 * @return {string}
 */
proto.pnp.form.v1.Question.prototype.getInputName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.setInputName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string label = 3;
 * @return {string}
 */
proto.pnp.form.v1.Question.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string place_holder = 4;
 * @return {string}
 */
proto.pnp.form.v1.Question.prototype.getPlaceHolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.setPlaceHolder = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Validation validations = 5;
 * @return {!Array<!proto.pnp.form.v1.Question.Validation>}
 */
proto.pnp.form.v1.Question.prototype.getValidationsList = function() {
  return /** @type{!Array<!proto.pnp.form.v1.Question.Validation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.form.v1.Question.Validation, 5));
};


/**
 * @param {!Array<!proto.pnp.form.v1.Question.Validation>} value
 * @return {!proto.pnp.form.v1.Question} returns this
*/
proto.pnp.form.v1.Question.prototype.setValidationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pnp.form.v1.Question.Validation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.form.v1.Question.Validation}
 */
proto.pnp.form.v1.Question.prototype.addValidations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pnp.form.v1.Question.Validation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.clearValidationsList = function() {
  return this.setValidationsList([]);
};


/**
 * optional Choice choice = 16;
 * @return {?proto.pnp.form.v1.Question.Choice}
 */
proto.pnp.form.v1.Question.prototype.getChoice = function() {
  return /** @type{?proto.pnp.form.v1.Question.Choice} */ (
    jspb.Message.getWrapperField(this, proto.pnp.form.v1.Question.Choice, 16));
};


/**
 * @param {?proto.pnp.form.v1.Question.Choice|undefined} value
 * @return {!proto.pnp.form.v1.Question} returns this
*/
proto.pnp.form.v1.Question.prototype.setChoice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.pnp.form.v1.Question.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.form.v1.Question.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional FirstNameAudio first_name_audio = 17;
 * @return {?proto.pnp.form.v1.Question.FirstNameAudio}
 */
proto.pnp.form.v1.Question.prototype.getFirstNameAudio = function() {
  return /** @type{?proto.pnp.form.v1.Question.FirstNameAudio} */ (
    jspb.Message.getWrapperField(this, proto.pnp.form.v1.Question.FirstNameAudio, 17));
};


/**
 * @param {?proto.pnp.form.v1.Question.FirstNameAudio|undefined} value
 * @return {!proto.pnp.form.v1.Question} returns this
*/
proto.pnp.form.v1.Question.prototype.setFirstNameAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.pnp.form.v1.Question.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.clearFirstNameAudio = function() {
  return this.setFirstNameAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.form.v1.Question.prototype.hasFirstNameAudio = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Text text = 18;
 * @return {?proto.pnp.form.v1.Question.Text}
 */
proto.pnp.form.v1.Question.prototype.getText = function() {
  return /** @type{?proto.pnp.form.v1.Question.Text} */ (
    jspb.Message.getWrapperField(this, proto.pnp.form.v1.Question.Text, 18));
};


/**
 * @param {?proto.pnp.form.v1.Question.Text|undefined} value
 * @return {!proto.pnp.form.v1.Question} returns this
*/
proto.pnp.form.v1.Question.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.pnp.form.v1.Question.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.form.v1.Question.prototype.hasText = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Recipient recipient = 19;
 * @return {?proto.pnp.form.v1.Question.Recipient}
 */
proto.pnp.form.v1.Question.prototype.getRecipient = function() {
  return /** @type{?proto.pnp.form.v1.Question.Recipient} */ (
    jspb.Message.getWrapperField(this, proto.pnp.form.v1.Question.Recipient, 19));
};


/**
 * @param {?proto.pnp.form.v1.Question.Recipient|undefined} value
 * @return {!proto.pnp.form.v1.Question} returns this
*/
proto.pnp.form.v1.Question.prototype.setRecipient = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.pnp.form.v1.Question.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.form.v1.Question} returns this
 */
proto.pnp.form.v1.Question.prototype.clearRecipient = function() {
  return this.setRecipient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.form.v1.Question.prototype.hasRecipient = function() {
  return jspb.Message.getField(this, 19) != null;
};


goog.object.extend(exports, proto.pnp.form.v1);
