// source: pnp/phone_call/v1/phone_call.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.pnp.phone_call.v1.CreatePhoneCallRequest', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.DeletePhoneCallRequest', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.GetPhoneCallRequest', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.ListPhoneCallsRequest', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.ListPhoneCallsResponse', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.PhoneCall', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.PhoneCall.Status', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.PhoneNumber', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.UpdatePhoneCallRequest', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.VerifyPhoneNumberRequest', null, global);
goog.exportSymbol('proto.pnp.phone_call.v1.VerifyPhoneNumberResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.ListPhoneCallsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.ListPhoneCallsRequest.displayName = 'proto.pnp.phone_call.v1.ListPhoneCallsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pnp.phone_call.v1.ListPhoneCallsResponse.repeatedFields_, null);
};
goog.inherits(proto.pnp.phone_call.v1.ListPhoneCallsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.ListPhoneCallsResponse.displayName = 'proto.pnp.phone_call.v1.ListPhoneCallsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.GetPhoneCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.GetPhoneCallRequest.displayName = 'proto.pnp.phone_call.v1.GetPhoneCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.CreatePhoneCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.CreatePhoneCallRequest.displayName = 'proto.pnp.phone_call.v1.CreatePhoneCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.UpdatePhoneCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.UpdatePhoneCallRequest.displayName = 'proto.pnp.phone_call.v1.UpdatePhoneCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.DeletePhoneCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.DeletePhoneCallRequest.displayName = 'proto.pnp.phone_call.v1.DeletePhoneCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.VerifyPhoneNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.displayName = 'proto.pnp.phone_call.v1.VerifyPhoneNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.PhoneNumber.displayName = 'proto.pnp.phone_call.v1.PhoneNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.VerifyPhoneNumberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.displayName = 'proto.pnp.phone_call.v1.VerifyPhoneNumberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.phone_call.v1.PhoneCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.phone_call.v1.PhoneCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.phone_call.v1.PhoneCall.displayName = 'proto.pnp.phone_call.v1.PhoneCall';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.ListPhoneCallsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.ListPhoneCallsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    persoItemId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsRequest}
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.ListPhoneCallsRequest;
  return proto.pnp.phone_call.v1.ListPhoneCallsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.ListPhoneCallsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsRequest}
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPersoItemId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.ListPhoneCallsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.ListPhoneCallsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPersoItemId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 perso_item_id = 1;
 * @return {number}
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.prototype.getPersoItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsRequest} returns this
 */
proto.pnp.phone_call.v1.ListPhoneCallsRequest.prototype.setPersoItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.ListPhoneCallsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.ListPhoneCallsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneCallsList: jspb.Message.toObjectList(msg.getPhoneCallsList(),
    proto.pnp.phone_call.v1.PhoneCall.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsResponse}
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.ListPhoneCallsResponse;
  return proto.pnp.phone_call.v1.ListPhoneCallsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.ListPhoneCallsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsResponse}
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pnp.phone_call.v1.PhoneCall;
      reader.readMessage(value,proto.pnp.phone_call.v1.PhoneCall.deserializeBinaryFromReader);
      msg.addPhoneCalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.ListPhoneCallsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.ListPhoneCallsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneCallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pnp.phone_call.v1.PhoneCall.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PhoneCall phone_calls = 1;
 * @return {!Array<!proto.pnp.phone_call.v1.PhoneCall>}
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.prototype.getPhoneCallsList = function() {
  return /** @type{!Array<!proto.pnp.phone_call.v1.PhoneCall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pnp.phone_call.v1.PhoneCall, 1));
};


/**
 * @param {!Array<!proto.pnp.phone_call.v1.PhoneCall>} value
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsResponse} returns this
*/
proto.pnp.phone_call.v1.ListPhoneCallsResponse.prototype.setPhoneCallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pnp.phone_call.v1.PhoneCall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pnp.phone_call.v1.PhoneCall}
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.prototype.addPhoneCalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pnp.phone_call.v1.PhoneCall, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pnp.phone_call.v1.ListPhoneCallsResponse} returns this
 */
proto.pnp.phone_call.v1.ListPhoneCallsResponse.prototype.clearPhoneCallsList = function() {
  return this.setPhoneCallsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.GetPhoneCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.GetPhoneCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.GetPhoneCallRequest}
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.GetPhoneCallRequest;
  return proto.pnp.phone_call.v1.GetPhoneCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.GetPhoneCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.GetPhoneCallRequest}
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.GetPhoneCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.GetPhoneCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.GetPhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.GetPhoneCallRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.CreatePhoneCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    persoItemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    delayedAt: (f = msg.getDelayedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.pnp.phone_call.v1.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.CreatePhoneCallRequest;
  return proto.pnp.phone_call.v1.CreatePhoneCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPersoItemId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDelayedAt(value);
      break;
    case 3:
      var value = new proto.pnp.phone_call.v1.PhoneNumber;
      reader.readMessage(value,proto.pnp.phone_call.v1.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.CreatePhoneCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPersoItemId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDelayedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pnp.phone_call.v1.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 perso_item_id = 1;
 * @return {number}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.getPersoItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.setPersoItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp delayed_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.getDelayedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} returns this
*/
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.setDelayedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.clearDelayedAt = function() {
  return this.setDelayedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.hasDelayedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PhoneNumber phone_number = 3;
 * @return {?proto.pnp.phone_call.v1.PhoneNumber}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.getPhoneNumber = function() {
  return /** @type{?proto.pnp.phone_call.v1.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.pnp.phone_call.v1.PhoneNumber, 3));
};


/**
 * @param {?proto.pnp.phone_call.v1.PhoneNumber|undefined} value
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} returns this
*/
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.CreatePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.CreatePhoneCallRequest.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.UpdatePhoneCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    delayedAt: (f = msg.getDelayedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.pnp.phone_call.v1.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.UpdatePhoneCallRequest;
  return proto.pnp.phone_call.v1.UpdatePhoneCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDelayedAt(value);
      break;
    case 3:
      var value = new proto.pnp.phone_call.v1.PhoneNumber;
      reader.readMessage(value,proto.pnp.phone_call.v1.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.UpdatePhoneCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDelayedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pnp.phone_call.v1.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp delayed_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.getDelayedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} returns this
*/
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.setDelayedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.clearDelayedAt = function() {
  return this.setDelayedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.hasDelayedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PhoneNumber phone_number = 3;
 * @return {?proto.pnp.phone_call.v1.PhoneNumber}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.getPhoneNumber = function() {
  return /** @type{?proto.pnp.phone_call.v1.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.pnp.phone_call.v1.PhoneNumber, 3));
};


/**
 * @param {?proto.pnp.phone_call.v1.PhoneNumber|undefined} value
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} returns this
*/
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.UpdatePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.UpdatePhoneCallRequest.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.DeletePhoneCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.DeletePhoneCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.DeletePhoneCallRequest}
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.DeletePhoneCallRequest;
  return proto.pnp.phone_call.v1.DeletePhoneCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.DeletePhoneCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.DeletePhoneCallRequest}
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.DeletePhoneCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.DeletePhoneCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.DeletePhoneCallRequest} returns this
 */
proto.pnp.phone_call.v1.DeletePhoneCallRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: (f = msg.getPhoneNumber()) && proto.pnp.phone_call.v1.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.VerifyPhoneNumberRequest;
  return proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pnp.phone_call.v1.PhoneNumber;
      reader.readMessage(value,proto.pnp.phone_call.v1.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pnp.phone_call.v1.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional PhoneNumber phone_number = 1;
 * @return {?proto.pnp.phone_call.v1.PhoneNumber}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.prototype.getPhoneNumber = function() {
  return /** @type{?proto.pnp.phone_call.v1.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.pnp.phone_call.v1.PhoneNumber, 1));
};


/**
 * @param {?proto.pnp.phone_call.v1.PhoneNumber|undefined} value
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest} returns this
*/
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberRequest} returns this
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberRequest.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countryCallingCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    basePhoneNumber: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.PhoneNumber}
 */
proto.pnp.phone_call.v1.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.PhoneNumber;
  return proto.pnp.phone_call.v1.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.PhoneNumber}
 */
proto.pnp.phone_call.v1.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCallingCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasePhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.PhoneNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountryCallingCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBasePhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string country_code = 1;
 * @return {string}
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.phone_call.v1.PhoneNumber} returns this
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string country_calling_code = 2;
 * @return {string}
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.getCountryCallingCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.phone_call.v1.PhoneNumber} returns this
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.setCountryCallingCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string base_phone_number = 3;
 * @return {string}
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.getBasePhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.phone_call.v1.PhoneNumber} returns this
 */
proto.pnp.phone_call.v1.PhoneNumber.prototype.setBasePhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.VerifyPhoneNumberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberResponse}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.VerifyPhoneNumberResponse;
  return proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.VerifyPhoneNumberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberResponse}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.VerifyPhoneNumberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pnp.phone_call.v1.VerifyPhoneNumberResponse} returns this
 */
proto.pnp.phone_call.v1.VerifyPhoneNumberResponse.prototype.setValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.phone_call.v1.PhoneCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.phone_call.v1.PhoneCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.PhoneCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    persoItemId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    delayedAt: (f = msg.getDelayedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.pnp.phone_call.v1.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.phone_call.v1.PhoneCall}
 */
proto.pnp.phone_call.v1.PhoneCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.phone_call.v1.PhoneCall;
  return proto.pnp.phone_call.v1.PhoneCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.phone_call.v1.PhoneCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.phone_call.v1.PhoneCall}
 */
proto.pnp.phone_call.v1.PhoneCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPersoItemId(value);
      break;
    case 3:
      var value = /** @type {!proto.pnp.phone_call.v1.PhoneCall.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDelayedAt(value);
      break;
    case 5:
      var value = new proto.pnp.phone_call.v1.PhoneNumber;
      reader.readMessage(value,proto.pnp.phone_call.v1.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.phone_call.v1.PhoneCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.phone_call.v1.PhoneCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.phone_call.v1.PhoneCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPersoItemId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDelayedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pnp.phone_call.v1.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.phone_call.v1.PhoneCall.Status = {
  COMPLETED: 0,
  INCOMPLETE_ERROR: 1,
  INCOMPLETE_INVALID: 2,
  INCOMPLETE_BUSY: 3,
  INCOMPLETE_NO_ANSWER: 4,
  INCOMPLETE_REJECTED: 5,
  SCHEDULED: 6,
  PREPARING: 7,
  RINGING: 8,
  ANSWERED: 9
};

/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 perso_item_id = 2;
 * @return {number}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.getPersoItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.setPersoItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Status status = 3;
 * @return {!proto.pnp.phone_call.v1.PhoneCall.Status}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.getStatus = function() {
  return /** @type {!proto.pnp.phone_call.v1.PhoneCall.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.pnp.phone_call.v1.PhoneCall.Status} value
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp delayed_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.getDelayedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
*/
proto.pnp.phone_call.v1.PhoneCall.prototype.setDelayedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.clearDelayedAt = function() {
  return this.setDelayedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.hasDelayedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PhoneNumber phone_number = 5;
 * @return {?proto.pnp.phone_call.v1.PhoneNumber}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.getPhoneNumber = function() {
  return /** @type{?proto.pnp.phone_call.v1.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.pnp.phone_call.v1.PhoneNumber, 5));
};


/**
 * @param {?proto.pnp.phone_call.v1.PhoneNumber|undefined} value
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
*/
proto.pnp.phone_call.v1.PhoneCall.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.phone_call.v1.PhoneCall} returns this
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.phone_call.v1.PhoneCall.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.pnp.phone_call.v1);
