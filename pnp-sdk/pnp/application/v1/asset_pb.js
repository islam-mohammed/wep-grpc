// source: pnp/application/v1/asset.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pnp.application.v1.Asset', null, global);
goog.exportSymbol('proto.pnp.application.v1.Asset.Audio', null, global);
goog.exportSymbol('proto.pnp.application.v1.Asset.Image', null, global);
goog.exportSymbol('proto.pnp.application.v1.Asset.Type', null, global);
goog.exportSymbol('proto.pnp.application.v1.Asset.TypeDataCase', null, global);
goog.exportSymbol('proto.pnp.application.v1.Asset.Video', null, global);
goog.exportSymbol('proto.pnp.application.v1.ListAssetsRequest', null, global);
goog.exportSymbol('proto.pnp.application.v1.ListAssetsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.application.v1.ListAssetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.application.v1.ListAssetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.application.v1.ListAssetsRequest.displayName = 'proto.pnp.application.v1.ListAssetsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.application.v1.ListAssetsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.application.v1.ListAssetsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.application.v1.ListAssetsResponse.displayName = 'proto.pnp.application.v1.ListAssetsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.application.v1.Asset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pnp.application.v1.Asset.oneofGroups_);
};
goog.inherits(proto.pnp.application.v1.Asset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.application.v1.Asset.displayName = 'proto.pnp.application.v1.Asset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.application.v1.Asset.Audio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.application.v1.Asset.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.application.v1.Asset.Audio.displayName = 'proto.pnp.application.v1.Asset.Audio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.application.v1.Asset.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.application.v1.Asset.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.application.v1.Asset.Image.displayName = 'proto.pnp.application.v1.Asset.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pnp.application.v1.Asset.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pnp.application.v1.Asset.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pnp.application.v1.Asset.Video.displayName = 'proto.pnp.application.v1.Asset.Video';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.application.v1.ListAssetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.application.v1.ListAssetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.application.v1.ListAssetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.ListAssetsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.application.v1.ListAssetsRequest}
 */
proto.pnp.application.v1.ListAssetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.application.v1.ListAssetsRequest;
  return proto.pnp.application.v1.ListAssetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.application.v1.ListAssetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.application.v1.ListAssetsRequest}
 */
proto.pnp.application.v1.ListAssetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.application.v1.ListAssetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.application.v1.ListAssetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.application.v1.ListAssetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.ListAssetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pnp.application.v1.ListAssetsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.application.v1.ListAssetsRequest} returns this
 */
proto.pnp.application.v1.ListAssetsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.application.v1.ListAssetsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.application.v1.ListAssetsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.application.v1.ListAssetsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.ListAssetsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsMap: (f = msg.getAssetsMap()) ? f.toObject(includeInstance, proto.pnp.application.v1.Asset.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.application.v1.ListAssetsResponse}
 */
proto.pnp.application.v1.ListAssetsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.application.v1.ListAssetsResponse;
  return proto.pnp.application.v1.ListAssetsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.application.v1.ListAssetsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.application.v1.ListAssetsResponse}
 */
proto.pnp.application.v1.ListAssetsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAssetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.pnp.application.v1.Asset.deserializeBinaryFromReader, "", new proto.pnp.application.v1.Asset());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.application.v1.ListAssetsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.application.v1.ListAssetsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.application.v1.ListAssetsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.ListAssetsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.pnp.application.v1.Asset.serializeBinaryToWriter);
  }
};


/**
 * map<string, Asset> assets = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.pnp.application.v1.Asset>}
 */
proto.pnp.application.v1.ListAssetsResponse.prototype.getAssetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.pnp.application.v1.Asset>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.pnp.application.v1.Asset));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pnp.application.v1.ListAssetsResponse} returns this
 */
proto.pnp.application.v1.ListAssetsResponse.prototype.clearAssetsMap = function() {
  this.getAssetsMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pnp.application.v1.Asset.oneofGroups_ = [[16,17,18]];

/**
 * @enum {number}
 */
proto.pnp.application.v1.Asset.TypeDataCase = {
  TYPE_DATA_NOT_SET: 0,
  AUDIO: 16,
  IMAGE: 17,
  VIDEO: 18
};

/**
 * @return {proto.pnp.application.v1.Asset.TypeDataCase}
 */
proto.pnp.application.v1.Asset.prototype.getTypeDataCase = function() {
  return /** @type {proto.pnp.application.v1.Asset.TypeDataCase} */(jspb.Message.computeOneofCase(this, proto.pnp.application.v1.Asset.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.application.v1.Asset.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.application.v1.Asset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.application.v1.Asset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    audio: (f = msg.getAudio()) && proto.pnp.application.v1.Asset.Audio.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.pnp.application.v1.Asset.Image.toObject(includeInstance, f),
    video: (f = msg.getVideo()) && proto.pnp.application.v1.Asset.Video.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.application.v1.Asset}
 */
proto.pnp.application.v1.Asset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.application.v1.Asset;
  return proto.pnp.application.v1.Asset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.application.v1.Asset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.application.v1.Asset}
 */
proto.pnp.application.v1.Asset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pnp.application.v1.Asset.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 16:
      var value = new proto.pnp.application.v1.Asset.Audio;
      reader.readMessage(value,proto.pnp.application.v1.Asset.Audio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 17:
      var value = new proto.pnp.application.v1.Asset.Image;
      reader.readMessage(value,proto.pnp.application.v1.Asset.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 18:
      var value = new proto.pnp.application.v1.Asset.Video;
      reader.readMessage(value,proto.pnp.application.v1.Asset.Video.deserializeBinaryFromReader);
      msg.setVideo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.application.v1.Asset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.application.v1.Asset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.application.v1.Asset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.pnp.application.v1.Asset.Audio.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.pnp.application.v1.Asset.Image.serializeBinaryToWriter
    );
  }
  f = message.getVideo();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.pnp.application.v1.Asset.Video.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pnp.application.v1.Asset.Type = {
  IMAGE: 0,
  VIDEO: 1,
  AUDIO: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.application.v1.Asset.Audio.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.application.v1.Asset.Audio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.application.v1.Asset.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.Audio.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.application.v1.Asset.Audio}
 */
proto.pnp.application.v1.Asset.Audio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.application.v1.Asset.Audio;
  return proto.pnp.application.v1.Asset.Audio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.application.v1.Asset.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.application.v1.Asset.Audio}
 */
proto.pnp.application.v1.Asset.Audio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.application.v1.Asset.Audio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.application.v1.Asset.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.application.v1.Asset.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.Audio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.application.v1.Asset.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.application.v1.Asset.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.application.v1.Asset.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    preserveAlpha: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    alt: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.application.v1.Asset.Image}
 */
proto.pnp.application.v1.Asset.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.application.v1.Asset.Image;
  return proto.pnp.application.v1.Asset.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.application.v1.Asset.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.application.v1.Asset.Image}
 */
proto.pnp.application.v1.Asset.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreserveAlpha(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.application.v1.Asset.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.application.v1.Asset.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.application.v1.Asset.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreserveAlpha();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAlt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool preserve_alpha = 1;
 * @return {boolean}
 */
proto.pnp.application.v1.Asset.Image.prototype.getPreserveAlpha = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pnp.application.v1.Asset.Image} returns this
 */
proto.pnp.application.v1.Asset.Image.prototype.setPreserveAlpha = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string alt = 2;
 * @return {string}
 */
proto.pnp.application.v1.Asset.Image.prototype.getAlt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.application.v1.Asset.Image} returns this
 */
proto.pnp.application.v1.Asset.Image.prototype.setAlt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pnp.application.v1.Asset.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.pnp.application.v1.Asset.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pnp.application.v1.Asset.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.Video.toObject = function(includeInstance, msg) {
  var f, obj = {
    posterUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pnp.application.v1.Asset.Video}
 */
proto.pnp.application.v1.Asset.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pnp.application.v1.Asset.Video;
  return proto.pnp.application.v1.Asset.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pnp.application.v1.Asset.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pnp.application.v1.Asset.Video}
 */
proto.pnp.application.v1.Asset.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosterUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pnp.application.v1.Asset.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pnp.application.v1.Asset.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pnp.application.v1.Asset.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pnp.application.v1.Asset.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosterUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string poster_url = 1;
 * @return {string}
 */
proto.pnp.application.v1.Asset.Video.prototype.getPosterUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.application.v1.Asset.Video} returns this
 */
proto.pnp.application.v1.Asset.Video.prototype.setPosterUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.pnp.application.v1.Asset.Type}
 */
proto.pnp.application.v1.Asset.prototype.getType = function() {
  return /** @type {!proto.pnp.application.v1.Asset.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pnp.application.v1.Asset.Type} value
 * @return {!proto.pnp.application.v1.Asset} returns this
 */
proto.pnp.application.v1.Asset.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.pnp.application.v1.Asset.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pnp.application.v1.Asset} returns this
 */
proto.pnp.application.v1.Asset.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Audio audio = 16;
 * @return {?proto.pnp.application.v1.Asset.Audio}
 */
proto.pnp.application.v1.Asset.prototype.getAudio = function() {
  return /** @type{?proto.pnp.application.v1.Asset.Audio} */ (
    jspb.Message.getWrapperField(this, proto.pnp.application.v1.Asset.Audio, 16));
};


/**
 * @param {?proto.pnp.application.v1.Asset.Audio|undefined} value
 * @return {!proto.pnp.application.v1.Asset} returns this
*/
proto.pnp.application.v1.Asset.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.pnp.application.v1.Asset.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.application.v1.Asset} returns this
 */
proto.pnp.application.v1.Asset.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.application.v1.Asset.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Image image = 17;
 * @return {?proto.pnp.application.v1.Asset.Image}
 */
proto.pnp.application.v1.Asset.prototype.getImage = function() {
  return /** @type{?proto.pnp.application.v1.Asset.Image} */ (
    jspb.Message.getWrapperField(this, proto.pnp.application.v1.Asset.Image, 17));
};


/**
 * @param {?proto.pnp.application.v1.Asset.Image|undefined} value
 * @return {!proto.pnp.application.v1.Asset} returns this
*/
proto.pnp.application.v1.Asset.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.pnp.application.v1.Asset.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.application.v1.Asset} returns this
 */
proto.pnp.application.v1.Asset.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.application.v1.Asset.prototype.hasImage = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Video video = 18;
 * @return {?proto.pnp.application.v1.Asset.Video}
 */
proto.pnp.application.v1.Asset.prototype.getVideo = function() {
  return /** @type{?proto.pnp.application.v1.Asset.Video} */ (
    jspb.Message.getWrapperField(this, proto.pnp.application.v1.Asset.Video, 18));
};


/**
 * @param {?proto.pnp.application.v1.Asset.Video|undefined} value
 * @return {!proto.pnp.application.v1.Asset} returns this
*/
proto.pnp.application.v1.Asset.prototype.setVideo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.pnp.application.v1.Asset.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pnp.application.v1.Asset} returns this
 */
proto.pnp.application.v1.Asset.prototype.clearVideo = function() {
  return this.setVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pnp.application.v1.Asset.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 18) != null;
};


goog.object.extend(exports, proto.pnp.application.v1);
